name: Build cloud images

on:
  push:
    tags:
      - v*

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup build environment   
        run: |
          make build-deps

      - name: Check code quality
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.27
          
  build:
    name: Build cloud images
    runs-on: ubuntu-18.04

    env:
      KROSSBOARD_UI_IMAGE: krossboard/krossboard-ui:latest
      KROSSBOARD_KOAINSTANCE_IMAGE: rchakode/kube-opex-analytics:latest 

    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13

    - name: Check out code
      uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install build dependencies   
      run: |
        make build-deps

    - name: Test package
      run: |
        make test

    - name: Patch version
      run: |
        GIT_LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "")
        GIT_LATEST_SHA=$(git rev-parse --short HEAD)
        if [ -z "$GIT_LATEST_TAG" ]; then
          KB_RELEASE_VERSION=$GIT_LATEST_SHA
        else
          MATCHED_TAG=$(git describe --exact-match $GIT_LATEST_SHA || echo "TAG_NOT_MATCHED")
          KB_RELEASE_VERSION=$(echo $GIT_LATEST_TAG | sed 's/v//')
          if [ "$MATCHED_TAG" != "$GIT_LATEST_TAG" ]; then
            KB_RELEASE_VERSION="${KB_RELEASE_VERSION}-${GIT_LATEST_SHA}"
          fi
        fi
        VERSION_LINE=$(grep -n 'Version:' cmd/root.go | cut -f1 -d:)
        VERSION_ORIG=$(grep 'Version:' cmd/root.go | awk -F '"' '{print $(NF-1)}')
        sed -i "${VERSION_LINE}s/${VERSION_ORIG}/${KB_RELEASE_VERSION}/" cmd/root.go

    - name: Setup GCP credentials
      continue-on-error: true
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      id: gcp-build
      with:
        version: '290.0.1'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Build GCP image
      continue-on-error: true
      shell: bash
      env:
        GOOGLE_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      run: |
        echo "release version is => `grep 'Version:' cmd/root.go | awk -F '"' '{print $(NF-1)}'`"
        make dist-cloud-image-gcp

    - name: Build Azure image    
      continue-on-error: true
      shell: bash
      id: azure-build
      env:
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}   
      run: |
        echo "release version is => `grep 'Version:' cmd/root.go | awk -F '"' '{print $(NF-1)}'`"
        make dist-cloud-image-azure

    - name: Build AWS image   
      continue-on-error: true
      shell: bash
      id: aws-build
      env:
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      run: |
        echo "release version is => `grep 'Version:' cmd/root.go | awk -F '"' '{print $(NF-1)}'`"
        make dist-cloud-image-aws

#     - name: Check on failures
#      if: steps.azure-build.outputs.status != 'success' || steps.aws-build.outputs.status != 'success' || steps.gcp-build.outputs.status != 'success'
#      run: exit 1        
